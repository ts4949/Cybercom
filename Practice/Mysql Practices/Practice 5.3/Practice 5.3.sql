create database practice5_3;

use practice5_3;

CREATE TABLE employees (
    employee_id INT PRIMARY KEY,
    employee_name VARCHAR(100),
    employee_salary DECIMAL(10, 2)
);

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    customer_name VARCHAR(100),
    customer_country VARCHAR(50)
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    employee_id INT,
    order_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (employee_id) REFERENCES employees(employee_id)
);

INSERT INTO employees (employee_id, employee_name, employee_salary) VALUES
(1, 'John Smith', 60000),
(2, 'Jane Doe', 70000),
(3, 'Michael Johnson', 55000),
(4, 'Emily Williams', 65000),
(5, 'David Brown', 75000),
(6, 'Sarah Davis', 80000),
(7, 'Robert Wilson', 90000),
(8, 'Jessica Thompson', 85000),
(9, 'Christopher Taylor', 95000),
(10, 'Ashley Anderson', 70000);

INSERT INTO customers (customer_id, customer_name, customer_country) VALUES
(1, 'Acme Inc.', 'USA'),
(2, 'Stark Industries', 'USA'),
(3, 'Wayne Enterprises', 'Canada'),
(4, 'Oscorp', 'USA'),
(5, 'Globex Corporation', 'Canada'),
(6, 'Virtucon', 'USA'),
(7, 'Hooli', 'Canada'),
(8, 'Pied Piper', 'USA'),
(9, 'Massive Dynamic', 'USA'),
(10, 'Cyberdyne Systems', 'Canada');

INSERT INTO orders (order_id, customer_id, employee_id, order_amount) VALUES
(1, 1, 3, 2000),
(2, 2, 5, 15000),
(3, 3, 7, 8000),
(4, 4, 2, 25000),
(5, 5, 9, 12000),
(6, 6, 4, 18000),
(7, 7, 8, 10000),
(8, 8, 6, 30000),
(9, 9, 1, 20000),
(10, 10, 10, 5000),
(11, 1, 5, 8000),
(12, 2, 3, 22000),
(13, 3, 6, 15000),
(14, 4, 8, 35000),
(15, 5, 2, 28000),
(16, 6, 7, 12000),
(17, 7, 4, 18000),
(18, 8, 9, 40000),
(19, 9, 1, 25000),
(20, 10, 10, 10000);

#	Write a SQL query to retrieve the names and salaries of all employees who have a salary greater than the average salary of all employees.

SELECT employee_name, employee_salary
FROM employees
WHERE employee_salary > (SELECT AVG(employee_salary) FROM employees);
 
#	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order.

SELECT c.customer_name, SUM(o.order_amount) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_name
ORDER BY total_revenue DESC;
 
#	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, where the total revenue is greater than $10,000.

SELECT c.customer_name, SUM(o.order_amount) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_name
HAVING SUM(o.order_amount) > 10000
ORDER BY total_revenue DESC;
 
#	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, where the total revenue is greater than the average revenue generated by all customers.


SELECT c.customer_name, SUM(o.order_amount) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_name
HAVING SUM(o.order_amount) > (SELECT AVG(total_revenue) 
                              FROM (SELECT SUM(order_amount) AS total_revenue
                                    FROM orders
                                    GROUP BY customer_id) AS subquery)
ORDER BY total_revenue DESC; 

#	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, where the total revenue is greater than the average revenue generated by all customers, and the customer is from the "USA" or "Canada".

SELECT c.customer_name, SUM(o.order_amount) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE c.customer_country IN ('USA', 'Canada')
GROUP BY c.customer_name
HAVING SUM(o.order_amount) > (SELECT AVG(total_revenue)
FROM (SELECT SUM(order_amount) AS total_revenue
FROM orders
GROUP BY customer_id) AS subquery)
ORDER BY total_revenue DESC;
 
#	Write a SQL query to retrieve the names of all employees who have made sales greater than $50,000 in the "orders" table.

SELECT e.employee_name
FROM employees e
JOIN orders o ON e.employee_id = o.employee_id
GROUP BY e.employee_name
HAVING SUM(o.order_amount) > 50000;
 
#	Write a SQL query to retrieve the names of all employees who have made sales greater than the average sales of all employees in the "orders" table, sorted by sales in descending order.

SELECT e.employee_name, SUM(o.order_amount) AS total_sales
FROM employees e
JOIN orders o ON e.employee_id = o.employee_id
GROUP BY e.employee_name
HAVING SUM(o.order_amount) > (SELECT AVG(total_sales)
FROM (SELECT SUM(order_amount) AS total_sales
FROM orders
GROUP BY employee_id) AS subquery)
ORDER BY total_sales DESC;
 
#	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, where the customer is from the "USA" and the revenue is greater than $5,000.

SELECT c.customer_name, SUM(o.order_amount) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE c.customer_country = 'USA'
GROUP BY c.customer_name
HAVING SUM(o.order_amount) > 5000
ORDER BY total_revenue DESC;
 
#	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, where the customer is from the "USA" and the revenue is greater than the average revenue generated by all customers from the "USA".

SELECT c.customer_name, SUM(o.order_amount) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE c.customer_country = 'USA'
GROUP BY c.customer_name
HAVING SUM(o.order_amount) > (SELECT AVG(total_revenue)
FROM (SELECT SUM(order_amount) AS total_revenue
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
WHERE c.customer_country = 'USA'
GROUP BY o.customer_id) AS subquery)
ORDER BY total_revenue DESC;

#	Write a SQL query to retrieve the names and total revenue generated by all customers in the "orders" table, sorted by revenue in descending order, where the customer is from the "USA" and the revenue is greater than the average revenue generated by all customers, and the customer has made at least 2 orders.


SELECT c.customer_name, SUM(o.order_amount) AS total_revenue
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE c.customer_country = 'USA'
GROUP BY c.customer_name
HAVING SUM(o.order_amount) > (SELECT AVG(total_revenue)
                              FROM (SELECT SUM(order_amount) AS total_revenue
                                    FROM orders
                                    GROUP BY customer_id) AS subquery)
       AND COUNT(o.order_id) >= 2
ORDER BY total_revenue DESC;