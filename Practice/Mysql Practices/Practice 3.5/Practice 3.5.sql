create database if not exists practice3_5;

use practice3_5;

CREATE TABLE IF NOT EXISTS customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    phone VARCHAR(20)
);

CREATE TABLE IF NOT EXISTS products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(100),
    unit_price DECIMAL(10,2),
    description TEXT
);

CREATE TABLE IF NOT EXISTS orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    customer_id INT,
    product_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);

#	Insert at least five customers, five products, and ten orders into the respective tables. 
#	Make sure that at least two customers have multiple orders, and at least two products are included in multiple orders.

-- Insert data into the "customers" table
INSERT INTO customers VALUES
    (1, 'John', 'Doe', 'john.doe@email.com', '123-456-7890'),
    (2, 'Jane', 'Smith', 'jane.smith@email.com', '987-654-3210'),
    (3, 'Robert', 'Johnson', 'robert.johnson@email.com', '555-123-4567'),
    (4, 'Emily', 'Davis', 'emily.davis@email.com', '777-888-9999'),
    (5, 'Michael', 'Anderson', 'michael.anderson@email.com', '111-222-3333');

-- Insert data into the "products" table
INSERT INTO products VALUES
    (1, 'Product A', 19.99, 'Description for Product A'),
    (2, 'Product B', 29.99, 'Description for Product B'),
    (3, 'Product C', 39.99, 'Description for Product C'),
    (4, 'Product D', 49.99, 'Description for Product D'),
    (5, 'Product E', 59.99, 'Description for Product E');

-- Insert data into the "orders" table
INSERT INTO orders VALUES
    (1, '2024-03-07', 1, 1),
    (2, '2024-03-08', 2, 2),
    (3, '2024-03-09', 3, 3),
    (4, '2024-03-10', 4, 4),
    (5, '2024-03-11', 5, 5),
    (6, '2024-03-12', 1, 2),
    (7, '2024-03-13', 2, 3),
    (8, '2024-03-14', 3, 4),
    (9, '2024-03-15', 4, 5),
    (10, '2024-03-16', 5, 1);

#	Write a query that retrieves the customer's first name, last name, email, and the number of orders they have placed. 
#	The results should be ordered by the number of orders in descending order.

SELECT
    c.first_name,
    c.last_name,
    c.email,
    COUNT(o.order_id) AS number_of_orders
FROM
    customers c
LEFT JOIN
    orders o ON c.customer_id = o.customer_id
GROUP BY
    c.customer_id
ORDER BY
    number_of_orders DESC;

#	Write a query that retrieves the product name, the total number of orders for each product, 
#	and the total revenue generated by each product. The results should be ordered by the total revenue in descending order.

SELECT
    p.product_name,
    COUNT(o.order_id) AS total_orders,
    SUM(p.unit_price) * COUNT(o.order_id) AS total_revenue
FROM
    products p
JOIN
    orders o ON p.product_id = o.product_id
GROUP BY
    p.product_id
ORDER BY
    total_revenue DESC;

#	Write a query that retrieves the first name, last name, email, and product name for each order. 
#	The results should only include orders where the customer has placed multiple orders.

SELECT
    c.first_name,
    c.last_name,
    c.email,
    p.product_name
FROM
    customers c
JOIN
    orders o ON c.customer_id = o.customer_id
JOIN
    products p ON o.product_id = p.product_id
WHERE
    c.customer_id IN (
        SELECT customer_id
        FROM orders
        GROUP BY customer_id
        HAVING COUNT(order_id) > 1);

#	Write a query that retrieves the first name, last name, and email for each customer who has placed 
#	at least one order for a product with a unit price greater than $50.

SELECT
    c.first_name,
    c.last_name,
    c.email
FROM
    customers c
JOIN
    orders o ON c.customer_id = o.customer_id
JOIN
    products p ON o.product_id = p.product_id
WHERE
    p.unit_price > 50;

#	Write a query that retrieves the product name and the number of times it has been ordered, 
#	but only includes products that have been ordered more than once.

SELECT
    p.product_name,
    COUNT(o.order_id) AS order_count
FROM
    products p
JOIN
    orders o ON p.product_id = o.product_id
GROUP BY
    p.product_id
HAVING
    COUNT(o.order_id) > 1;